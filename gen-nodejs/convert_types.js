//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var ConvertRequest = module.exports.ConvertRequest = function(args) {
  this.value = null;
  this.currencyFrom = null;
  this.currencyTo = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.currencyFrom !== undefined && args.currencyFrom !== null) {
      this.currencyFrom = args.currencyFrom;
    }
    if (args.currencyTo !== undefined && args.currencyTo !== null) {
      this.currencyTo = args.currencyTo;
    }
  }
};
ConvertRequest.prototype = {};
ConvertRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.currencyFrom = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.currencyTo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConvertRequest.prototype.write = function(output) {
  output.writeStructBegin('ConvertRequest');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.currencyFrom !== null && this.currencyFrom !== undefined) {
    output.writeFieldBegin('currencyFrom', Thrift.Type.STRING, 2);
    output.writeString(this.currencyFrom);
    output.writeFieldEnd();
  }
  if (this.currencyTo !== null && this.currencyTo !== undefined) {
    output.writeFieldBegin('currencyTo', Thrift.Type.STRING, 3);
    output.writeString(this.currencyTo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConvertResponce = module.exports.ConvertResponce = function(args) {
  this.converted = null;
  this.rate = null;
  if (args) {
    if (args.converted !== undefined && args.converted !== null) {
      this.converted = args.converted;
    }
    if (args.rate !== undefined && args.rate !== null) {
      this.rate = args.rate;
    }
  }
};
ConvertResponce.prototype = {};
ConvertResponce.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.converted = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConvertResponce.prototype.write = function(output) {
  output.writeStructBegin('ConvertResponce');
  if (this.converted !== null && this.converted !== undefined) {
    output.writeFieldBegin('converted', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.converted);
    output.writeFieldEnd();
  }
  if (this.rate !== null && this.rate !== undefined) {
    output.writeFieldBegin('rate', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.rate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

